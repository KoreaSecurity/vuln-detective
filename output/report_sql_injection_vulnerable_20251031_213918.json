{
  "filename": "examples/sql_injection_vulnerable.py",
  "timestamp": "2025-10-31 21:39:18",
  "language": "python",
  "statistics": {
    "total_vulnerabilities": 4,
    "critical": 4,
    "high": 0,
    "average_cvss": 9.3,
    "exploits_generated": 0,
    "patches_generated": 4
  },
  "vulnerabilities": [
    {
      "vuln_type": "SQL Injection",
      "cwe_id": "CWE-89",
      "severity": "Critical",
      "line_number": 42,
      "description": "Direct concatenation of user input into SQL query without sanitization or parameterization, allowing SQL injection.",
      "code_snippet": "query = f\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\"",
      "exploitability": "An attacker can manipulate the input to execute arbitrary SQL commands.",
      "recommendation": "Use parameterized queries or prepared statements to safely handle user input.",
      "confidence": 1.0,
      "metadata": {
        "filename": "examples/sql_injection_vulnerable.py",
        "language": "python",
        "cvss": {
          "base_score": 9.3,
          "severity": "Critical",
          "exploitability": 3.9,
          "impact": 5.5,
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
          "metrics": {
            "attack_vector": "NETWORK",
            "attack_complexity": "LOW",
            "privileges_required": "NONE",
            "user_interaction": "NONE",
            "confidentiality": "HIGH",
            "integrity": "HIGH",
            "availability": "LOW"
          }
        },
        "risk_score": 9.3
      }
    },
    {
      "vuln_type": "SQL Injection",
      "cwe_id": "CWE-89",
      "severity": "Critical",
      "line_number": 48,
      "description": "Concatenating the 'user_id' directly into the SQL query without validation or parameterization, leading to SQL injection.",
      "code_snippet": "query = \"SELECT * FROM users WHERE id = \" + str(user_id)",
      "exploitability": "An attacker can append additional SQL commands to 'user_id' parameter to manipulate the SQL query.",
      "recommendation": "Use parameterized queries to prevent SQL injection.",
      "confidence": 1.0,
      "metadata": {
        "filename": "examples/sql_injection_vulnerable.py",
        "language": "python",
        "cvss": {
          "base_score": 9.3,
          "severity": "Critical",
          "exploitability": 3.9,
          "impact": 5.5,
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
          "metrics": {
            "attack_vector": "NETWORK",
            "attack_complexity": "LOW",
            "privileges_required": "NONE",
            "user_interaction": "NONE",
            "confidentiality": "HIGH",
            "integrity": "HIGH",
            "availability": "LOW"
          }
        },
        "risk_score": 9.3
      }
    },
    {
      "vuln_type": "SQL Injection",
      "cwe_id": "CWE-89",
      "severity": "Critical",
      "line_number": 53,
      "description": "Incorporating user input ('search_term') directly into a SQL query without sanitization, leading to SQL injection.",
      "code_snippet": "query = f\"SELECT username, email FROM users WHERE username LIKE '%{search_term}%'\"",
      "exploitability": "An attacker can use the 'search_term' to inject malicious SQL code.",
      "recommendation": "Utilize parameterized queries to handle user inputs securely.",
      "confidence": 1.0,
      "metadata": {
        "filename": "examples/sql_injection_vulnerable.py",
        "language": "python",
        "cvss": {
          "base_score": 9.3,
          "severity": "Critical",
          "exploitability": 3.9,
          "impact": 5.5,
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
          "metrics": {
            "attack_vector": "NETWORK",
            "attack_complexity": "LOW",
            "privileges_required": "NONE",
            "user_interaction": "NONE",
            "confidentiality": "HIGH",
            "integrity": "HIGH",
            "availability": "LOW"
          }
        },
        "risk_score": 9.3
      }
    },
    {
      "vuln_type": "SQL Injection",
      "cwe_id": "CWE-89",
      "severity": "Critical",
      "line_number": 58,
      "description": "User input ('new_email') is directly used in an SQL update statement without sanitization, allowing for SQL injection.",
      "code_snippet": "query = f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\"",
      "exploitability": "An attacker can craft 'new_email' input to alter the SQL command.",
      "recommendation": "Adopt parameterized queries for updating database records.",
      "confidence": 1.0,
      "metadata": {
        "filename": "examples/sql_injection_vulnerable.py",
        "language": "python",
        "cvss": {
          "base_score": 9.3,
          "severity": "Critical",
          "exploitability": 3.9,
          "impact": 5.5,
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
          "metrics": {
            "attack_vector": "NETWORK",
            "attack_complexity": "LOW",
            "privileges_required": "NONE",
            "user_interaction": "NONE",
            "confidentiality": "HIGH",
            "integrity": "HIGH",
            "availability": "LOW"
          }
        },
        "risk_score": 9.3
      }
    }
  ]
}